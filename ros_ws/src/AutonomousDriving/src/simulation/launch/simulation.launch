<launch>
  <arg name="load_params" default="true" />
  <arg name="corrupt_state_estimate" default="true" />
  <arg name="right_image_topic" default="/realsense/rgb/right_image_raw" />
  <arg name="right_info_topic" default="/realsense/rgb/right_image_info" />
  <arg name="left_image_topic" default="/realsense/rgb/left_image_raw" />
  <arg name="left_info_topic" default="/realsense/rgb/left_image_info" />
  <arg name="depth_image_topic" default="/realsense/depth/image" />
  <arg name="depth_info_topic" default="/realsense/depth/camera_info" />

  <include file="$(find simulation)/launch/unity_ros.launch" >
    <arg name="load_params" value="$(arg load_params)" />
    <arg name="right_image_topic" value="$(arg right_image_topic)" />
    <arg name="right_info_topic" value="$(arg right_info_topic)" />
    <arg name="left_image_topic" value="$(arg left_image_topic)" />
    <arg name="left_info_topic" value="$(arg left_info_topic)" />
    <arg name="depth_image_topic" value="$(arg depth_image_topic)" />
    <arg name="depth_info_topic" value="$(arg depth_info_topic)" />
  </include>

  <node name="Simulation" pkg="simulation" type="Car_build.x86_64"/>

  <node pkg="simulation"
        type="state_estimate_corruptor_node"
        name="state_estimate_corruptor"
        output="screen">

    <!-- random-walk drift factor (grows with distance traveled) (sigma / m) -->
    <param if="$(arg corrupt_state_estimate)" name="drift_rw_factor" value="0.03"/>
    <param unless="$(arg corrupt_state_estimate)" name="drift_rw_factor" value="0.0"/>

    <!-- independent white noise -->
    <param if="$(arg corrupt_state_estimate)" name="pos_white_sig" value="0.005"/>
    <param unless="$(arg corrupt_state_estimate)" name="pos_white_sig" value="0.0"/>

    <!-- average number of seconds between jumps/drift updates -->
    <param if="$(arg corrupt_state_estimate)" name="jump_seconds" value="20.0"/>
    <param unless="$(arg corrupt_state_estimate)" name="jump_seconds" value="-1.0"/>
  </node>

  <node name="w_to_unity" pkg="simulation" type="w_to_unity"/>

  <!-- RViz Node -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find simulation)/rviz/default_rviz_config.rviz"/>

  <!-- Road point cloud node -->
  <node pkg="depth_semantic_road" type="depth_semantic_fusion_node.py" name="depth_semantic_fusion_node" output="screen">
    <param name="point_retention_percentage" value="0.1"/>
  </node>

  <!-- Static Transform Publisher for map to odom -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_world" args="0 0 0 0 0 0 map world" />

  <!-- Static Transform Publisher for odom to base_link -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="true_body_to_base_link" args="0 0 0 0 0 0 true_body base_link" />

  <!-- OctoMap Server Node -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen">
    <param name="resolution" value="0.8"/>
    <param name="frame_id" value="world"/>
    <param name="sensor_model/max_range" value="20"/>
    <param name="occupancy_threshold" value="0.5"/>
    <remap from="cloud_in" to="/point_cloud"/>
  </node>

  <!-- Move Base Node -->
  <node pkg="move_base" type="move_base" name="move_base" output="screen">
    <rosparam file="$(find path_planner)/config/global_costmap_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find path_planner)/config/local_costmap_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find path_planner)/config/base_local_planner_params.yaml" command="load"/>
  </node>

  <!-- Path Planning Node -->
  <node pkg="path_planner" type="path_planner_node.py" name="path_planning_node" output="screen"/>

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_true_body"      args="0 0 0 0 0 0 /Quadrotor/TrueState /true_body" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_rgb_camera"      args="0 0 0 0 0 0 /camera /Quadrotor/RGBCameraLeft " />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_depth_camera"      args="0 0 0 0 0 0 /depth_camera /Quadrotor/DepthCamera" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_left_camera"      args="0 0 0 0 0 0 /camera /Quadrotor/RGBCameraLeft" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_to_body"      args="0 0 0 0 0 0 /true_body /camera" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="depth_camera_to_body"      args="0 0 0 0 0 0 /true_body /depth_camera" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="depth_camera_frame_to_body"      args="0 0 0 0 0 0 /true_body /Quadrotor/Sensors/DepthCamera" />

</launch>
